%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(t1).   
 
-export([start/0]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

-define(Id_c1,"c1").

-define(SourceDir,"./test/specs").
-define(DestDir,".").
-define(SpecFiles,["spec.deployment","spec.cluster","spec.host","spec.application"]).
	 

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
-define(HostNames,["c100","c300","c200","c201"]).
-define(HostName,"c100").
-define(ClusterName,"test_cluster").
-define(DeplName,"any_not_same_hosts_not_same_pods").

start()->
   
    ok=setup(),
    ok=connect_nodes(),
    ok=first_cluster_node(), 
%    ok=create_node(),
 %   ok=copy_spec_files(),

  %  ok=delete_spec_files(),
  %  ok=delete_node(),
 %   ok=pod_candidates(),
  
    io:format("Test OK !!! ~p~n",[?MODULE]),
    init:stop(),
    ok.


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
connect_nodes()->
    io:format("Start ~p~n",[?FUNCTION_NAME]),

    Cookie=config_node:cluster_cookie(?ClusterName),    
    Node=list_to_atom(?ClusterName++"@"++?HostName),
    
    R1=[{FileName,dist_lib:rm_file(Node,Cookie,?DestDir,FileName)}||FileName<-?SpecFiles],
    io:format("R1 ~p~n",[R1]),
    R2=[{FileName,dist_lib:cp_file(Node,Cookie,?SourceDir,FileName,?DestDir)}||FileName<-?SpecFiles],
    io:format("R2 ~p~n",[R2]),

    io:format("Stop OK !!! ~p~n",[?FUNCTION_NAME]),
    
    ok.
    ConnectNodeNAme=config_node:cluster_connect
    
    ok.
    


firsts_cluster_node()->
    
    io:format("Start ~p~n",[?FUNCTION_NAME]),

    Cookie=config_node:cluster_cookie(?ClusterName),    
    Node=list_to_atom(?ClusterName++"@"++?HostName),
    
    R1=[{FileName,dist_lib:rm_file(Node,Cookie,?DestDir,FileName)}||FileName<-?SpecFiles],
    io:format("R1 ~p~n",[R1]),
    R2=[{FileName,dist_lib:cp_file(Node,Cookie,?SourceDir,FileName,?DestDir)}||FileName<-?SpecFiles],
    io:format("R2 ~p~n",[R2]),

    io:format("Stop OK !!! ~p~n",[?FUNCTION_NAME]),
    
    ok.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
copy_spec_files()->

    io:format("Start ~p~n",[?FUNCTION_NAME]),

    Cookie=config_node:cluster_cookie(?ClusterName),    
    Node=list_to_atom(?ClusterName++"@"++?HostName),
    
    R1=[{FileName,dist_lib:rm_file(Node,Cookie,?DestDir,FileName)}||FileName<-?SpecFiles],
    io:format("R1 ~p~n",[R1]),
    R2=[{FileName,dist_lib:cp_file(Node,Cookie,?SourceDir,FileName,?DestDir)}||FileName<-?SpecFiles],
    io:format("R2 ~p~n",[R2]),


    io:format("Stop OK !!! ~p~n",[?FUNCTION_NAME]),
    ok.
    

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
-define(SourceDepFile,"./test/specs/spec.deployment").
-define(DepFile,"spec.deployment").
-define(SourceClusterFile,"./test/specs/spec.cluster").
-define(ClusterFile,"spec.cluster").
-define(SourceHostFile,"./test/specs/spec.host").
-define(HostFile,"spec.host").
-define(SourceApplicationFile,"./test/specs/spec.application").
-define(ApplicationFile,"spec.application").
-define(LogDir,"logs").

create_node()->
    io:format("Start ~p~n",[?FUNCTION_NAME]),
    
    Cookie=config_node:cluster_cookie(?ClusterName),    
    ClusterNode=list_to_atom(?ClusterName++"@"++?HostName),
    NodeName=?ClusterName,
    ClusterDir=config_node:cluster_dir(?ClusterName),
    PaArgs=" ",
    EnvArgs=" -detached ",
    

    %% Create node and dir                  
                                             
    {ok,ClusterNode,ClusterDir}=misc_cluster:create_node_dir(?HostName,?ClusterName,Cookie,NodeName,ClusterDir,PaArgs,EnvArgs),
    
    %% copy specs
    [
     {"spec.application",{error,[eexists,"./spec.application"]}},
     {"spec.cluster",{error,[eexists,"./spec.cluster"]}},
     {"spec.deployment",{error,[eexists,"./spec.deployment"]}},
     {"spec.host",{error,[eexists,"./spec.host"]}}
    ]=lists:sort([{FileName,dist_lib:rm_file(ClusterNode,Cookie,?DestDir,FileName)}||FileName<-?SpecFiles]),
    
    SpecDir=ClusterDir,
    [
     {"spec.application",ok},
     {"spec.cluster",ok},
     {"spec.deployment",ok},
     {"spec.host",ok}
    ]=lists:sort([{FileName,dist_lib:cp_file(ClusterNode,Cookie,?SourceDir,FileName,SpecDir)}||FileName<-?SpecFiles]),

    %% application set_env
    ConfigNodeEnv=[{config_node,[{deployment_spec,?DepFile},
				 {cluster_spec,?ClusterFile},
				 {host_spec,?HostFile},
				 {application_spec,?ApplicationFile},
				 {spec_dir,ClusterDir}]}],
    ClusterLogDir=filename:join(ClusterDir,?LogDir),
    NodelogEnv=[{nodelog,[{log_dir,ClusterLogDir}]}],

    []=dist_lib:cmd(ClusterNode,Cookie,application,get_all_env,[config_node],5000),
    []=dist_lib:cmd(ClusterNode,Cookie,application,get_all_env,[nodelog],5000),
    
    AllEnvs=lists:append([ConfigNodeEnv,NodelogEnv]),
    ok=dist_lib:cmd(ClusterNode,Cookie,application,set_env,[AllEnvs],5000),
    [
     {application_spec,"spec.application"},
     {cluster_spec,"spec.cluster"},
     {deployment_spec,"spec.deployment"},
     {host_spec,"spec.host"},
     {spec_dir,"test_cluster.dir"}
    ]=lists:sort(dist_lib:cmd(ClusterNode,Cookie,application,get_all_env,[config_node],5000)),
    
    [
     {log_dir,"test_cluster.dir/logs"}
    ]=lists:sort(dist_lib:cmd(ClusterNode,Cookie,application,get_all_env,[nodelog],5000)),
    
    
    

    io:format("Stop OK !!! ~p~n",[?FUNCTION_NAME]),
    ok.


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

	 	 

setup()->
    io:format("Start ~p~n",[?FUNCTION_NAME]),

    file:delete(?ClusterFile),
    {ok,ClusterBin}=file:read_file(?SourceClusterFile),
    ok=file:write_file(?ClusterFile,ClusterBin),
    
    file:delete(?DepFile),
    {ok,DepBin}=file:read_file(?SourceDepFile),
    ok=file:write_file(?DepFile,DepBin),

    file:delete(?HostFile),
    {ok,HostBin}=file:read_file(?SourceHostFile),
    ok=file:write_file(?HostFile,HostBin),

    file:delete(?ApplicationFile),
    {ok,ApplBin}=file:read_file(?SourceApplicationFile),
    ok=file:write_file(?ApplicationFile,ApplBin),
 
    ok=application:start(common),
    pong=common:ping(),
    ok=application:start(config_node),
    pong=config_node:ping(),
    ok=application:start(ops_node),
    pong=ops_node:ping(),


    io:format("Stop OK !!! ~p~n",[?FUNCTION_NAME]),

    ok.
